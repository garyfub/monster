<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	   http://www.springframework.org/schema/context  
	   http://www.springframework.org/schema/context/spring-context-4.0.xsd
	   http://www.springframework.org/schema/mvc  
	   http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	
	<!-- spring.xml中引入mvc模块，不再写spring-mvc的配置文件 -->
	
	
	<!-- ###########context模块start######## -->
	<!-- spring装配Bean的路径 -->
	<context:component-scan base-package="com.advance.monster.web"></context:component-scan>
	
	<!-- 读取配置文件 -->
	<context:property-placeholder   location="classpath:jdbc.properties,classpath:config.properties"/>
	
	<!-- ###########context模块end######## -->
	
	
	<!-- ###########bean模块start######## -->
	
	<!-- 配置druid数据源      还需要咨询研究官方文档-->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	<property name="driverClassName" value="${jdbc_driverClassName}" />
	<property name="url" value="${jdbc_url}" />
	<property name="username" value="${jdbc_username}" />
	<property name="password" value="${jdbc_password}" />

	<!-- 初始化连接大小 -->
	<property name="initialSize" value="10" />
	<!-- 连接池最大使用连接数量 -->
	<property name="maxActive" value="20" />
	<!-- 连接池最大空闲连接数 -->
	<property name="maxIdle" value="20" /> 
	<!-- 连接池最小空闲连接数 -->
	<property name="minIdle" value="10" />
	<!-- 在抛出异常之前获取连接最大等待时间 -->
	<property name="maxWait" value="60000" />

	<!-- <property name="poolPreparedStatements" value="true" /> <property 
		name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->

	<property name="validationQuery" value="${validationQuery}" />
	<property name="testOnBorrow" value="false" />
	<property name="testOnReturn" value="false" />
	<property name="testWhileIdle" value="true" />

	<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	<property name="timeBetweenEvictionRunsMillis" value="60000" />
	<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	<property name="minEvictableIdleTimeMillis" value="25200000" />

	<!-- 打开removeAbandoned功能 -->
	<property name="removeAbandoned" value="true" />
	<!-- 1800秒，也就是30分钟 -->
	<property name="removeAbandonedTimeout" value="1800" />
	<!-- 关闭abanded连接时输出错误日志 -->
	<property name="logAbandoned" value="true" />
	<!-- 监控数据库 -->
	<!-- <property name="filters" value="stat" /> -->
	<!-- 解密配置文件中的密文 -->
	<property name="filters" value="decipher" />
	<property name="proxyFilters">
		<list>
			<ref bean="log-filter" />
		</list>
	</property>
	</bean>

	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
		<property name="statementExecutableSqlLogEnable" value="true" />
	</bean>
	
	
	<!-- myBatis文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath*:mapper/*Mapper.xml" />
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	
	<!-- 獲取sqlsession  -->
	<bean id="sqlSessionSimple" class="org.mybatis.spring.SqlSessionTemplate">
  		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<!-- 獲取sqlsession  -->
	<bean id="sqlSessionBatch" class="org.mybatis.spring.SqlSessionTemplate">
  		<constructor-arg index="0" ref="sqlSessionFactory" />
  		<constructor-arg index="1" value="BATCH" />
	</bean>
	
	<!-- 獲取sqlsession另外一種方式  不依賴spring-mybatis包 -->
	<!-- <bean id="userMapper" class="org.mybatis.spring.sample.mapper.UserDaoImpl">
  		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>  -->
	
	
	<!-- 配置這個之後就不需要寫DAO層的實現類了,但是為了靈活,我們默認關閉這個 -->
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.advance.monster.dao" />
	</bean> -->
	
	
	<!-- ###########bean模块end######## -->
	
	
	<!-- ###########mvc模块start######## -->
	
	<!-- 启用注解驱动的springmvc -->
	<mvc:annotation-driven></mvc:annotation-driven>
	
	<!-- 静态资源访问 -->
	<mvc:resources location="" mapping=""/>
	
	<!--  -->
	<mvc:view-controller path="/" view-name="/jsp/index" /> 
	
	<!-- 拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
		<mvc:mapping path=""/>
		<mvc:mapping path=""/>
		<bean class=""></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- ###########mvc模块end######## -->
	
	   
</beans>